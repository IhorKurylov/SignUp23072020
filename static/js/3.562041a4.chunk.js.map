{"version":3,"sources":["components/SignUp/SignUpContainer.jsx"],"names":["useStyles","makeStyles","theme","root","display","justifyContent","flexWrap","margin","spacing","width","withoutLabel","marginTop","textField","input","email","form","boxShadow","header","textAlign","fontFamily","button","error","color","fontSize","SignUpContainer","classes","React","useState","firstName","lastName","password","confirmPassword","firstNameError","lastNameError","emailError","passwordError","confirmPasswordError","firstNameText","lastNameText","emailText","passwordText","confirmPasswordText","showPassword","showConfirmPassword","values","setValues","clearFormFields","validatorSetState","fieldName","value","errorField","helpTextField","helpText","handleChange","prop","event","target","length","match","fieldValidator","handleMouseDownPassword","preventDefault","className","onSubmit","valid","formValid","console","log","id","label","variant","type","placeholder","helperText","onChange","onKeyUp","autoComplete","clsx","htmlFor","endAdornment","position","aria-label","onClick","onMouseDown","edge","labelWidth"],"mappings":"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","file":"static/js/3.562041a4.chunk.js","sourcesContent":["import React from 'react';\r\nimport clsx from 'clsx';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexWrap: 'wrap',\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    withoutLabel: {\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    textField: {\r\n        width: '100ch',\r\n    },\r\n    input: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    email: {\r\n        margin: theme.spacing(1),\r\n        width: '100ch',\r\n    },\r\n    form: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        width: '500px',\r\n        justifyContent: 'space-between',\r\n        boxShadow: \"0px 5px 10px #555\"\r\n    },\r\n    header: {\r\n        width: \"100%\",\r\n        textAlign: 'center',\r\n        fontFamily: \"Roboto\",\r\n    },\r\n    button: {\r\n        width: '100%',\r\n        margin: theme.spacing(1),\r\n\r\n    },\r\n    error: {\r\n        color: '#f44336',\r\n        fontFamily: 'Roboto',\r\n        fontSize: \"12px\",\r\n        margin: \"3px 14px 0px\",\r\n\r\n    }\r\n}));\r\n\r\nexport default function SignUpContainer() {\r\n    const classes = useStyles();\r\n    const [values, setValues] = React.useState({\r\n        firstName: '',\r\n        lastName: '',\r\n        email: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n        firstNameError: false,\r\n        lastNameError: false,\r\n        emailError: false,\r\n        passwordError: false,\r\n        confirmPasswordError: false,\r\n        firstNameText: \"\",\r\n        lastNameText: \"\",\r\n        emailText: \"\",\r\n        passwordText: \"\",\r\n        confirmPasswordText: \"\",\r\n        showPassword: false,\r\n        showConfirmPassword: false,\r\n    });\r\n\r\n    const clearFormFields = () => {\r\n        setValues({\r\n            ...values,\r\n            firstName: '',\r\n            lastName: '',\r\n            email: '',\r\n            password: '',\r\n            confirmPassword: '',\r\n        })\r\n    }\r\n\r\n    const validatorSetState = (fieldName, value = '', errorField, error = false, helpTextField, helpText = '') => {\r\n        setValues({\r\n            ...values,\r\n            [fieldName]: value,\r\n            [errorField]: error,\r\n            [helpTextField]: helpText\r\n        })\r\n    }\r\n\r\n    const fieldValidator = (fieldName, value = '') => {\r\n        switch (fieldName) {\r\n            case 'firstName':\r\n                if (value === \"\") {\r\n                    validatorSetState('firstName', value, 'firstNameError', true, 'firstNameText', 'Field is empty');\r\n                } else if (value.length > 100) {\r\n                    validatorSetState('firstName', value, 'firstNameError', true, 'firstNameText', 'Maximum 100 characters allowed');\r\n                } else {\r\n                    validatorSetState('firstName', value, 'firstNameError', false, 'firstNameText', '');\r\n                }\r\n                break;\r\n\r\n            case 'lastName':\r\n                if (value === \"\") {\r\n                    validatorSetState('lastName', value, 'lastNameError', true, 'lastNameText', 'Field is empty');\r\n                } else if (value.length > 100) {\r\n                    validatorSetState('lastName', value, 'lastNameError', true, 'lastNameText', 'Maximum 100 characters allowed');\r\n                } else {\r\n                    validatorSetState('lastName', value, 'lastNameError', false, 'lastNameText', '');\r\n                }\r\n                break;\r\n\r\n            case 'email':\r\n                if (!value.match(\r\n                    /^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\r\n                )) {\r\n                    validatorSetState('email', value, 'emailError', true, 'emailText', 'Enter valid email');\r\n                } else {\r\n                    validatorSetState('email', value, 'emailError', false, 'emailText', '');\r\n                }\r\n                break;\r\n\r\n            case 'password':\r\n                if (!value.match(\r\n                    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,64}$/)) {\r\n                    validatorSetState('password', value, 'passwordError', true, 'passwordText', `Password must include 8-64 characters: lowercase, uppercase, digit, symbol`);\r\n                } else {\r\n                    validatorSetState('password', value, 'passwordError', false, 'passwordText', ``);\r\n                }\r\n                break;\r\n\r\n            case 'confirmPassword':\r\n                if (values.password !== values.confirmPassword || value === \"\") {\r\n                    validatorSetState('confirmPassword', value, 'confirmPasswordError', true, 'confirmPasswordText', `Confirmed password doesn't match the password`);\r\n                } else {\r\n                    validatorSetState('confirmPassword', value, 'confirmPasswordError', false, 'confirmPasswordText', \"\");\r\n                }\r\n                break;\r\n            default:\r\n        }\r\n\r\n    }\r\n\r\n    const formValid = () => {\r\n        let valid = false;\r\n        !values.firstNameError && !values.lastNameError && !values.emailError && !values.passwordError &&\r\n        !values.confirmPasswordError && (valid = true);\r\n\r\n        !values.firstName && !values.lastName && !values.email && !values.password && !values.confirmPassword && (valid = false);\r\n        return valid;\r\n    }\r\n\r\n\r\n    const handleSubmit = () => {\r\n        if (formValid()) {\r\n            console.log(`--SUBMITTING--\r\n                First Name: ${values.firstName}\r\n                Last Name: ${values.lastName}\r\n                Email: ${values.email}\r\n                Password: ${values.password}\r\n                Confirmed Password ${values.confirmPassword}`)\r\n            clearFormFields();\r\n        } else {\r\n            console.error(\"FORM INVALID\");\r\n        }\r\n    }\r\n    const handleChange = (prop) => (event) => {\r\n        setValues({[prop]: event.target.value});\r\n        fieldValidator(prop, event.target.value);\r\n    };\r\n\r\n    const handleClickShowPassword = () => {\r\n        setValues({...values, showPassword: !values.showPassword});\r\n\r\n    };\r\n\r\n    const handleClickShowConfirmPassword = () => {\r\n        setValues({...values, showConfirmPassword: !values.showConfirmPassword});\r\n    };\r\n\r\n\r\n    const handleMouseDownPassword = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <form className={classes.form} onSubmit={handleSubmit}>\r\n                <h1 className={classes.header}>Please Sign Up</h1>\r\n                <TextField className={classes.input}\r\n                           id=\"outlined-basic-firstName\"\r\n                           label=\"First Name\"\r\n                           variant=\"outlined\"\r\n                           type=\"text\"\r\n                           placeholder=\"John\"\r\n                           value={values.firstName}\r\n                           error={values.firstNameError}\r\n                           helperText={values.firstNameText}\r\n                           onChange={handleChange('firstName')}\r\n                           onKeyUp={handleChange('firstName')}\r\n                />\r\n                <TextField className={classes.input}\r\n                           id=\"outlined-basic-lastName\"\r\n                           label=\"Last Name\"\r\n                           variant=\"outlined\"\r\n                           type=\"text\"\r\n                           placeholder=\"Johnson\"\r\n                           value={values.lastName}\r\n                           error={values.lastNameError}\r\n                           helperText={values.lastNameText}\r\n                           onChange={handleChange('lastName')}\r\n                           onKeyUp={handleChange('lastName')}\r\n                />\r\n\r\n                <TextField className={classes.email}\r\n                           id=\"outlined-basic-email\"\r\n                           label=\"Email\"\r\n                           variant=\"outlined\"\r\n                           type=\"email\"\r\n                           placeholder={`example@gmail.com`}\r\n                           autoComplete=\"user-email\"\r\n                           value={values.email}\r\n                           error={values.emailError}\r\n                           helperText={values.emailText}\r\n                           onChange={handleChange('email')}\r\n                           onKeyUp={handleChange('email')}\r\n                />\r\n\r\n                <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\">\r\n                    <InputLabel htmlFor=\"outlined-adornment-password\">Password</InputLabel>\r\n                    <OutlinedInput\r\n                        id=\"outlined-adornment-password\"\r\n                        type={values.showPassword ? 'text' : 'password'}\r\n                        value={values.password}\r\n                        error={values.passwordError}\r\n                        onChange={handleChange('password')}\r\n                        onKeyUp={handleChange('password')}\r\n                        autoComplete=\"new-password\"\r\n                        placeholder='8-64, at least one: lowercase, uppercase, digit, symbol'\r\n                        endAdornment={\r\n                            <InputAdornment position=\"end\">\r\n                                <IconButton\r\n                                    aria-label=\"toggle password visibility\"\r\n                                    onClick={handleClickShowPassword}\r\n                                    onMouseDown={handleMouseDownPassword}\r\n                                    edge=\"end\"\r\n                                >\r\n                                    {values.showPassword ? <Visibility/> : <VisibilityOff/>}\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        }\r\n                        labelWidth={70}\r\n                    />\r\n                    <p className={classes.error}\r\n                       id=\"outlined-basic-helper-text\">{values.passwordText}</p>\r\n                </FormControl>\r\n\r\n                <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\">\r\n                    <InputLabel htmlFor=\"outlined-adornment-confirmPassword\">Confirm Password</InputLabel>\r\n                    <OutlinedInput\r\n                        id=\"outlined-adornment-confirmPassword\"\r\n                        type={values.showConfirmPassword ? 'text' : 'password'}\r\n                        value={values.confirmPassword}\r\n                        error={values.confirmPasswordError}\r\n                        onChange={handleChange('confirmPassword')}\r\n                        onKeyUp={handleChange('confirmPassword')}\r\n                        placeholder=\"enter your password again\"\r\n                        autoComplete=\"new-password\"\r\n                        endAdornment={\r\n                            <InputAdornment position=\"end\">\r\n                                <IconButton\r\n                                    aria-label=\"toggle password visibility\"\r\n                                    onClick={handleClickShowConfirmPassword}\r\n                                    onMouseDown={handleMouseDownPassword}\r\n                                    edge=\"end\"\r\n                                >\r\n                                    {values.showConfirmPassword ? <Visibility/> : <VisibilityOff/>}\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        }\r\n                        labelWidth={140}\r\n                    />\r\n                    <p className={classes.error} id=\"outlined-basic-helper-text\">{values.confirmPasswordText}</p>\r\n                </FormControl>\r\n\r\n\r\n                <Button className={classes.button}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                >\r\n                    sign up\r\n                </Button>\r\n                <Button className={classes.button}\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                        onClick={clearFormFields}\r\n                >\r\n                    Clear form\r\n                </Button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n"],"sourceRoot":""}