{"version":3,"sources":["components/Header/Header.module.css","components/Header/Header.jsx","hoc/withSuspense.js","components/SignIn/SignInContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","classes","wrapper","to","item","Button","variant","color","withSuspense","Component","props","fallback","useStyles","makeStyles","theme","root","display","justifyContent","flexWrap","margin","spacing","width","withoutLabel","marginTop","textField","input","email","form","boxShadow","header","textAlign","fontFamily","button","error","fontSize","SignInContainer","React","useState","password","emailError","passwordError","emailText","passwordText","showPassword","showConfirmPassword","values","setValues","clearFormFields","validatorSetState","fieldName","value","errorField","helpTextField","helpText","handleChange","prop","event","target","match","fieldValidator","onSubmit","valid","formValid","console","log","TextField","id","label","type","placeholder","autoComplete","helperText","onChange","onKeyUp","FormControl","clsx","InputLabel","htmlFor","OutlinedInput","endAdornment","InputAdornment","position","IconButton","aria-label","onClick","onMouseDown","preventDefault","edge","labelWidth","SignUpContainer","lazy","App","path","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.3d3ebc9b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Header_wrapper__hSp9s\",\"item\":\"Header_item__1FAMd\"};","import React from 'react';\r\nimport classes from './Header.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className={classes.wrapper}>\r\n            <NavLink to={'/signUp'} className={classes.item}>\r\n                <Button variant=\"contained\" color=\"primary\">\r\n                    Sign Up\r\n                </Button>\r\n            </NavLink>\r\n\r\n            <NavLink to={'/signIn'} className={classes.item}>\r\n                <Button variant=\"contained\" color=\"primary\">\r\n                    Sign In\r\n                </Button>\r\n            </NavLink>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default Header;\r\n\r\n","import React, {Suspense} from \"react\";\r\n\r\n\r\nexport const withSuspense = (Component) => {\r\n    return (props) => {\r\n        return <Suspense fallback={<div>Loading...</div>}><Component {...props}/></Suspense>\r\n    };\r\n};\r\n","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexWrap: 'wrap',\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    withoutLabel: {\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    textField: {\r\n        width: '100ch',\r\n    },\r\n    input: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    email: {\r\n        margin: theme.spacing(1),\r\n        width: '100ch',\r\n    },\r\n    form: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        width: '500px',\r\n        justifyContent: 'space-between',\r\n        boxShadow: \"0px 5px 10px #555\"\r\n    },\r\n    header: {\r\n        width: \"100%\",\r\n        textAlign: 'center',\r\n        fontFamily: \"Roboto\",\r\n    },\r\n    button: {\r\n        width: '100%',\r\n        margin: theme.spacing(1),\r\n\r\n    },\r\n    error: {\r\n        color: '#f44336',\r\n        fontFamily: 'Roboto',\r\n        fontSize: \"12px\",\r\n        margin: \"3px 14px 0px\",\r\n\r\n    }\r\n}));\r\n\r\nexport default function SignInContainer() {\r\n    const classes = useStyles();\r\n    const [values, setValues] = React.useState({\r\n        email: '',\r\n        password: '',\r\n        emailError: false,\r\n        passwordError: false,\r\n        emailText: \"\",\r\n        passwordText: \"\",\r\n        showPassword: false,\r\n        showConfirmPassword: false,\r\n    });\r\n\r\n    const clearFormFields = () => {\r\n        setValues({\r\n            ...values,\r\n            email: '',\r\n            password: '',\r\n        })\r\n    }\r\n\r\n    const validatorSetState = (fieldName, value = '', errorField, error = false, helpTextField, helpText = '') => {\r\n        setValues({\r\n            ...values,\r\n            [fieldName]: value,\r\n            [errorField]: error,\r\n            [helpTextField]: helpText\r\n        })\r\n    }\r\n\r\n    const fieldValidator = (fieldName, value = '') => {\r\n        switch (fieldName) {\r\n            case 'email':\r\n                if (!value.match(\r\n                    /^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\r\n                )) {\r\n                    validatorSetState('email', value, 'emailError', true, 'emailText', 'Enter valid email');\r\n                } else {\r\n                    validatorSetState('email', value, 'emailError', false, 'emailText', '');\r\n                }\r\n                break;\r\n\r\n            case 'password':\r\n                if (!value.match(\r\n                    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,64}$/)) {\r\n                    validatorSetState('password', value, 'passwordError', true, 'passwordText', `Password must include 8-64 characters: lowercase, uppercase, digit, symbol`);\r\n                } else {\r\n                    validatorSetState('password', value, 'passwordError', false, 'passwordText', ``);\r\n                }\r\n                break;\r\n\r\n            default:\r\n        }\r\n\r\n    }\r\n\r\n    const formValid = () => {\r\n        let valid = false;\r\n        !values.emailError && !values.passwordError && (valid = true);\r\n\r\n        !values.email && !values.password && (valid = false);\r\n        return valid;\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        if (formValid()) {\r\n            console.log(`--Signing In--\r\n                Email: ${values.email}\r\n                Password: ${values.password}`)\r\n            clearFormFields();\r\n        } else {\r\n            console.error(\"FORM INVALID\");\r\n        }\r\n    }\r\n    const handleChange = (prop) => (event) => {\r\n        setValues({[prop]: event.target.value});\r\n        fieldValidator(prop, event.target.value);\r\n    };\r\n\r\n    const handleClickShowPassword = () => {\r\n        setValues({...values, showPassword: !values.showPassword});\r\n\r\n    };\r\n\r\n    const handleMouseDownPassword = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <form className={classes.form} onSubmit={handleSubmit}>\r\n                <h1 className={classes.header}>Please Sign In</h1>\r\n                <TextField className={classes.email}\r\n                           id=\"outlined-basic-email\"\r\n                           label=\"Email\"\r\n                           variant=\"outlined\"\r\n                           type=\"email\"\r\n                           placeholder={`example@gmail.com`}\r\n                           autoComplete=\"user-email\"\r\n                           value={values.email}\r\n                           error={values.emailError}\r\n                           helperText={values.emailText}\r\n                           onChange={handleChange('email')}\r\n                           onKeyUp={handleChange('email')}\r\n                />\r\n\r\n                <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\">\r\n                    <InputLabel htmlFor=\"outlined-adornment-password\">Password</InputLabel>\r\n                    <OutlinedInput\r\n                        id=\"outlined-adornment-password\"\r\n                        type={values.showPassword ? 'text' : 'password'}\r\n                        value={values.password}\r\n                        error={values.passwordError}\r\n                        onChange={handleChange('password')}\r\n                        onKeyUp={handleChange('password')}\r\n                        autoComplete=\"new-password\"\r\n                        placeholder='8-64, at least one: lowercase, uppercase, digit, symbol'\r\n                        endAdornment={\r\n                            <InputAdornment position=\"end\">\r\n                                <IconButton\r\n                                    aria-label=\"toggle password visibility\"\r\n                                    onClick={handleClickShowPassword}\r\n                                    onMouseDown={handleMouseDownPassword}\r\n                                    edge=\"end\"\r\n                                >\r\n                                    {values.showPassword ? <Visibility/> : <VisibilityOff/>}\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        }\r\n                        labelWidth={70}\r\n                    />\r\n                    <p className={classes.error}\r\n                       id=\"outlined-basic-helper-text\">{values.passwordText}</p>\r\n                </FormControl>\r\n\r\n                <Button className={classes.button}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                >\r\n                    sign up\r\n                </Button>\r\n                <Button className={classes.button}\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                        onClick={clearFormFields}\r\n                >\r\n                    Clear form\r\n                </Button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header/Header\";\nimport {HashRouter, Route} from \"react-router-dom\";\nimport {withSuspense} from \"./hoc/withSuspense\";\nimport SignInContainer from \"./components/SignIn/SignInContainer\";\n\n\nconst SignUpContainer = React.lazy(() => import(\"./components/SignUp/SignUpContainer\"));\n\n\n\nconst App = () => {\n    return (\n        <HashRouter>\n            <div className='wrapper'>\n                <Header/>\n                <div className=\"content\">\n                    <h1>To proceed, please Sign In or Sign Up</h1>\n                    <Route path={'/signUp'}\n                           render={withSuspense(SignUpContainer)}/>\n                    <Route path={'/signIn'}\n                           render={withSuspense(SignInContainer)}/>\n                </div>\n\n            </div>\n        </HashRouter>\n    )\n};\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}