{"version":3,"sources":["components/SignUp/SignUpContainer.module.css","components/Header/Header.module.css","components/SignUp/SignUpContainer.jsx","components/Header/Header.jsx","hoc/withSuspense.js","components/SignIn/SignInContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","SignUpContainer","className","classes","wrapper","SignUpForm","React","Component","props","handleChange","e","preventDefault","target","name","value","setState","state","firstName","lastName","email","password","confirmPassword","validation","formErrors","formWrapper","onSubmit","this","handleSubmit","noValidate","htmlFor","type","placeholder","onChange","signUp","Header","to","item","Button","variant","color","withSuspense","fallback","SignInContainer","lazy","App","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4c2d0367.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"SignUpContainer_wrapper__2F0yq\",\"form\":\"SignUpContainer_form__NuCdN\",\"formWrapper\":\"SignUpContainer_formWrapper__3fD2b\",\"error\":\"SignUpContainer_error__DXK0l\",\"errorMessage\":\"SignUpContainer_errorMessage__1sQJG\",\"firstName\":\"SignUpContainer_firstName__3yOPN\",\"lastName\":\"SignUpContainer_lastName__2JFGr\",\"email\":\"SignUpContainer_email__fdOBm\",\"password\":\"SignUpContainer_password__3Fz1A\",\"signUp\":\"SignUpContainer_signUp__2bx5k\",\"createAccount\":\"SignUpContainer_createAccount__2EOra\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Header_wrapper__hSp9s\",\"item\":\"Header_item__1FAMd\"};","import React from 'react';\r\nimport classes from './SignUpContainer.module.css'\r\n//\r\n//\r\n// const formValid = (formsErrors, state) => {\r\n//     let valid = true;\r\n//     Object.values(formsErrors).forEach(val => {\r\n//         val.length > 0 && (valid = false);\r\n//         });\r\n//     // Object.values(state).forEach(val => {\r\n//     //     val.length === 0 && (valid = false);\r\n//     //     alert(val.length)\r\n//     // });\r\n//     return valid;\r\n// };\r\n//\r\n// const emailRegex = RegExp(\r\n//     /^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\r\n// );\r\n//\r\nclass SignUpContainer extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className={classes.wrapper}>\r\n                    <SignUpForm/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n//\r\nclass SignUpForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            email: \"\",\r\n            password: \"\",\r\n            confirmPassword: \"\",\r\n            validation: {\r\n                firstName: false,\r\n                lastName: false,\r\n                email: false,\r\n                password: false,\r\n                confirmPassword: false,\r\n            },\r\n            formErrors: {\r\n                firstName: \"\",\r\n                lastName: \"\",\r\n                email: \"\",\r\n                password: \"\",\r\n                confirmPassword: \"\"\r\n            }\r\n        };\r\n    }\r\n\r\n//\r\n//     handleSubmit = e => {\r\n//         // e.preventDefault();\r\n//         if (formValid(this.state.formErrors, this.state)) {\r\n//             alert(`\r\n//             First name ${this.state.firstName}\r\n//             Last name ${this.state.lastName}\r\n//             Email ${this.state.email}\r\n//             password ${this.state.password}\r\n//             confirm password ${this.state.confirmPassword}\r\n//             `)\r\n//         }\r\n//     };\r\n//\r\n    handleChange = e => {\r\n        e.preventDefault();\r\n        const {name, value} = e.target;\r\n        this.setState(\r\n            {\r\n                ...this.state,\r\n                [name]: value\r\n            }\r\n        );\r\n//         let formErrors = this.state.formErrors;\r\n//\r\n//         switch (name) {\r\n//             case \"firstName\":\r\n//                 if (value.length === 0) {\r\n//                     formErrors.firstName = 'Empty field'\r\n//                 } else {\r\n//                     formErrors.firstName =\r\n//                         value.length > 1 && value.length > 0\r\n//                             ? 'maximum 100 characters are allowed'\r\n//                             : \"\";\r\n//                 }\r\n//                 break;\r\n//             case \"lastName\":\r\n//                 if (value.length === 0) {\r\n//                     formErrors.lastName = 'Empty field'\r\n//                 } else {\r\n//                     formErrors.lastName =\r\n//                         value.length > 1 && value.length > 0\r\n//                             ? 'maximum 100 characters are allowed'\r\n//                             : \"\";\r\n//                 }\r\n//                 break;\r\n//             case \"email\":\r\n//                 formErrors.email =\r\n//                     emailRegex.test(value) && value.length > 0\r\n//                         ? ''\r\n//                         : \"Invalid email.address\";\r\n//                 break;\r\n//             case \"password\":\r\n//                 formErrors.password = value.length < 6 && value.length > 0\r\n//                     ? 'minimum 6 characters required'\r\n//                     : \"\";\r\n//                 formErrors.password = value.length > 100\r\n//                     ? 'maximum 100 characters are allowed'\r\n//                     : \"\";\r\n//                 break;\r\n//             case \"confirmPassword\":\r\n//                 formErrors.confirmPassword = value.length < 6 && value.length > 0\r\n//                     ? 'minimum 6 characters required'\r\n//                     : \"\";\r\n//                 formErrors.confirmPassword = value.length > 100\r\n//                     ? 'maximum 100 characters are allowed'\r\n//                     : \"\";\r\n//                 break;\r\n//             default:\r\n//                 break;\r\n//         }\r\n//\r\n\r\n    };\r\n\r\n//\r\n    render() {\r\n        return (\r\n            <div className={classes.formWrapper}>\r\n                <h1>Please Sign Up</h1>\r\n                <form onSubmit={this.handleSubmit} noValidate>\r\n                    <div className={classes.firstName}>\r\n                        <label htmlFor=\"firstName\">First Name</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"First Name\"\r\n                            name='firstName'\r\n                            value={this.state.firstName}\r\n                            onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className={classes.lastName}>\r\n                        <label htmlFor=\"lastName\">Last Name</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Last Name\"\r\n                            name='lastName'\r\n                            value={this.state.lastName}\r\n                            onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className={classes.email}>\r\n                        <label htmlFor=\"email\">Email</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Email\"\r\n                            name='email'\r\n                            value={this.state.email}\r\n                            onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className={classes.password}>\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input\r\n                            type=\"password\"\r\n                            placeholder=\"Password\"\r\n                            name='password'\r\n                            value={this.state.password}\r\n                            onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className={classes.password}>\r\n                        <label htmlFor=\"confirmPassword\">Confirm password</label>\r\n                        <input\r\n                            type=\"password\"\r\n                            placeholder=\"Confirm password\"\r\n                            name='confirmPassword'\r\n                            value={this.state.confirmPassword}\r\n                            onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className={classes.signUp}>\r\n                        <button type=\"submit\">Sign Up</button>\r\n                        <small>Already Have an Account?</small>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default SignUpContainer;\r\n\r\n","import React from 'react';\r\nimport classes from './Header.module.css'\r\nimport SignUpContainer from \"../SignUp/SignUpContainer\";\r\nimport {NavLink, Route} from \"react-router-dom\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <div className={classes.wrapper}>\r\n            <NavLink to={'/signUp'}  className={classes.item}>\r\n                <Button variant=\"contained\" color=\"primary\">\r\n                    Sign Up\r\n                </Button>\r\n            </NavLink>\r\n\r\n            <NavLink to={'/signIn'}  className={classes.item}>\r\n                <Button variant=\"contained\" color=\"primary\">\r\n                    Sign In\r\n                </Button>\r\n            </NavLink>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default Header;\r\n\r\n","import React, {Suspense} from \"react\";\r\n\r\n\r\n\r\nexport const withSuspense = (Component) => {\r\n    return (props)=> {\r\n        return <Suspense fallback={<div>Loading...</div>}><Component {...props}/></Suspense>\r\n    };\r\n};\r\n","import React from 'react';\r\nimport classes from './SignInContainer.module.css'\r\n\r\nclass SignInContainer extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className={classes.wrapper}>\r\n                <div>\r\n                    <h1>Please Sign In Page</h1>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default SignInContainer;\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header/Header\";\nimport {HashRouter, Route} from \"react-router-dom\";\nimport {withSuspense} from \"./hoc/withSuspense\";\nimport SignInContainer from \"./components/SignIn/SignInContainer\";\n\n\nconst SignUpContainer = React.lazy(() => import(\"./components/SignUp/SignUpContainer\"));\n\n\n\nconst App = () => {\n    return (\n        <HashRouter>\n            <div className='wrapper'>\n                <Header/>\n                <div className=\"content\">\n                    <Route path={'/signUp'}\n                           render={withSuspense(SignUpContainer)}/>\n                    <Route path={'/signIn'}\n                           render={withSuspense(SignInContainer)}/>\n                </div>\n\n            </div>\n        </HashRouter>\n    )\n};\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}